{"title":"异步与同步","date":"2015-03-07T13:00:00.000Z","slug":"async&sync","tags":["OS"],"categories":["Learning"],"updated":"2019-04-05T07:34:27.538Z","content":"<h1 id=\"异步与同步\">异步与同步<a href=\"post/async&sync#异步与同步\"></a></h1><h3 id=\"1．进程同步及异步的概念\">1．进程同步及异步的概念<a href=\"post/async&sync#1．进程同步及异步的概念\"></a></h3><ul>\n<li><p><strong>进程同步</strong>：就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。<strong>也就是必须一件一件事做,等前一件做完了才能做下一件事</strong>。</p>\n</li>\n<li><p>按照这个定义，其实绝大多数函数都是同步调用（例如sin,isdigit等）。但是一般而言，我们在说同步、异步的时候，特指那些需要其他部件协作或者需要一定时间完成的任务。</p>\n<blockquote>\n<p>最常见的例子就是sendmessage。该函数发送一个消息给某个窗口，在对方处理完消息之前，这个函数不返回。当对方处理完毕以后，该函数才把消息处理函数所返回的lresult值返回给调用者。</p>\n</blockquote>\n</li>\n<li><p><strong>异步</strong><br>异步的概念和同步相对。<strong>当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者</strong>。</p>\n<blockquote>\n<p>以casycsocket类为例（注意，csocket从casyncsocket派生，但是其功能已经由异步转化为同步），当一个客户端通过调用connect函数发出一个连接请求后，调用者线程立刻可以朝下运行。当连接真正建立起来以后，socket底层会发送一个消息通知该对象。</p>\n</blockquote>\n</li>\n<li><p>这里提到执行部件和调用者通过三种途径返回结果：<strong>状态、通知和回调</strong>。可以使用哪一种依赖于执行部件的实现，除非执行部件提供多种选择，否则不受调用者控制。如果执行部件用状态来通知，那么调用者就需要每隔一定时间检查一次，效率就很低（有些初学多线程编程的人，总喜欢用一个循环去检查某个变量的值，这其实是一种很严重的错误）。如果是使用通知的方式，效率则很高，因为执行部件几乎不需要做额外的操作。至于回调函数，其实和通知没太多区别。</p>\n</li>\n</ul>\n<h3 id=\"2-同步与异步传输：\">2. 同步与异步传输：<a href=\"post/async&sync#2-同步与异步传输：\"></a></h3><h4 id=\"异步传输\">异步传输<a href=\"post/async&sync#异步传输\"></a></h4><ul>\n<li>通常，异步传输是以字符为传输单位，每个字符都要附加 1 位起始位和 1 位停止位，以标记一个字符的开始和结束，并以此实现数据传输同步。所谓异步传输是指字符与字符（一个字符结束到下一个字符开始）之间的时间间隔是可变的，并不需要严格地限制它们的时间关系。起始位对应于二进制值 0，以低电平表示，占用 1 位宽度。停止位对应于二进制值 1，以高电平表示，占用 1~2 位宽度。一个字符占用 5~8位，具体取决于数据所采用的字符集。此外，还要附加 1 位奇偶校验位，可以选择奇校验或偶校验方式对该字符实施简单的差错控制。发送端与接收端除了采用相同的数据格式(字符的位数、停止位的位数、有无校验位及校验方式等)外，还应当采用相同的传输速率。</li>\n<li>异步传输又称为起止式异步通信方式，其优点是简单、可靠，适用于面向字符的、低速的异步通信场合。例如，计算机与Modem之间的通信就是采用这种方式。它的缺点是通信开销大，每传输一个字符都要额外附加2～3位，通信效率比较低。例如，在使用Modem上网时，普遍感觉速度很慢，除了传输速率低之外，与通信开销大、通信效率低也密切相关。</li>\n</ul>\n<h4 id=\"同步传输\">同步传输<a href=\"post/async&sync#同步传输\"></a></h4><ul>\n<li>通常，同步传输是以数据块为传输单位。每个数据块的头部和尾部都要附加一个特殊的字符或比特序列，标记一个数据块的开始和结束，一般还要附加一个校验序列 (如16位或32位CRC校验码)，以便对数据块进行差错控制。所谓同步传输是指数据块与数据块之间的时间间隔是固定的，必须严格地规定它们的时间关系。</li>\n</ul>\n<h3 id=\"3-同步阻塞与异步阻塞：\">3. 同步阻塞与异步阻塞：<a href=\"post/async&sync#3-同步阻塞与异步阻塞：\"></a></h3><ul>\n<li><p>同步是阻塞模式，异步是非阻塞模式。</p>\n<ul>\n<li>同步是指两个线程的运行是相关的，其中一个线程要阻塞等待另外一个线程的运行。异步的意思是两个线程毫无相关，自己运行自己的。</li>\n</ul>\n</li>\n<li><p>同步是指：发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式。<br>异步是指：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SendMessage(...)</span><br><span class=\"line\">TRACE0(&quot;just  like  send&quot;);</span><br><span class=\"line\">PostMessage(...)</span><br><span class=\"line\">TRACE0(&quot;just  like  WSASend  using  overlapped&quot;);</span><br></pre></td></tr></table></figure>\n<p>SendMessage是调用的时候不返回,等消息响应后才执行TRACE0,这就是同步.<br>PostMessage是调用后马上返回,不用消息响应就执行TRACE0,这就是异步.</p>\n<h3 id=\"4-其它解释：\">4. 其它解释：<a href=\"post/async&sync#4-其它解释：\"></a></h3><h4 id=\"同步和异步的区别\">同步和异步的区别<a href=\"post/async&sync#同步和异步的区别\"></a></h4><ul>\n<li>举个例子：普通B/S模式（同步）AJAX技术（异步）</li>\n<li>同步：提交请求-&gt;等待服务器处理-&gt;处理完毕返回。这个期间客户端浏览器不能干任何事</li>\n<li>异步: 请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕</li>\n<li>同步就是你叫我去吃饭，我听到了就和你去吃饭；如果没有听到，你就不停的叫，直到我告诉你听到了，才一起去吃饭。</li>\n<li>异步就是你叫我，然后自己去吃饭，我得到消息后可能立即走，也可能等到下班才去吃饭。</li>\n<li>打电话时同步，发消息是异步</li>\n</ul>\n","prev":{"title":"函数式编程","slug":"functional_programming"},"link":"https://vachelhu.github.io/blog/post/async&sync/","toc":[{"title":"异步与同步","id":"异步与同步","index":"1"}],"copyright":{"author":"Wenjie Hu","link":"<a href=\"https://vachelhu.github.io/blog/post/async&sync/\" title=\"异步与同步\">https://vachelhu.github.io/blog/post/async&sync/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}