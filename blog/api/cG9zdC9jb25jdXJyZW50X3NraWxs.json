{"title":"处理并发的一些技巧和思想","date":"2015-11-27T13:00:00.000Z","slug":"concurrent_skill","tags":["OS"],"categories":["技术"],"updated":"2020-01-27T12:04:33.478Z","content":"<h1 id=\"处理并发的一些技巧和思想\">处理并发的一些技巧和思想<a href=\"post/concurrent_skill#处理并发的一些技巧和思想\"></a></h1><h3 id=\"写在前头\">写在前头<a href=\"post/concurrent_skill#写在前头\"></a></h3><p>并发，是当前应用级面临的普遍问题，在很多开发场景下都有涉及。最近做的一个微信活动页面，专门研究了这个问题，做一些小的总结</p>\n<h3 id=\"数据库的处理（model）\">数据库的处理（model）<a href=\"post/concurrent_skill#数据库的处理（model）\"></a></h3><p>数据库操作是并发过程中出现的最主要的方向，在编程技巧下应注意这么几点</p>\n<ol>\n<li><strong>减少对数据库的访问</strong><ul>\n<li>数据库独占3306端口，与数据库的交互都是走的端口，网络传输很慢</li>\n<li>合并请求，将要得到的最终数据压缩到一个sql中获取</li>\n</ul>\n</li>\n<li><strong>业务层分库分表</strong><ul>\n<li>合理的业务分析，横向分库，纵向分表</li>\n</ul>\n</li>\n<li><strong>使用集群与散列</strong></li>\n<li><strong>读写分离</strong><ul>\n<li>对于大数据量的表但是对于呈现读写要求不平均的话，读操作与写操作分离</li>\n</ul>\n</li>\n<li><strong>建立高效的索引</strong></li>\n<li><strong>镜像</strong><br>镜像是大型网站常采用的提高性能和数据安全性的方式，镜像的技术可以解决不同网络接入商和地域带来的用户访问速度差异，比如ChinaNet和EduNet之间的差异就促使了很多网站在教育网内搭建镜像站点，数据进行定时更新或者实时更新。</li>\n<li><strong>memcache分布式缓存</strong><br>将系统中价值不大并且不需要即时更新的数据放进memcache中作为临时表来用，相当于在db层前挡了一招~ ~</li>\n</ol>\n<h3 id=\"后台控制（controller）\">后台控制（controller）<a href=\"post/concurrent_skill#后台控制（controller）\"></a></h3><ol>\n<li><strong>使用缓存</strong><ul>\n<li>对于不重要的不禁要的数据使用缓存，减少实时性，减少请求</li>\n</ul>\n</li>\n<li><strong>使用高效的算法</strong><ul>\n<li>使用算法提高后端的运算速度</li>\n<li>整洁代码</li>\n</ul>\n</li>\n<li><strong>使用队列，控制并发</strong><ul>\n<li>参照nodejs的事件驱动，异步加载方式</li>\n</ul>\n</li>\n<li><strong>合理开多进程，多线程，将各部分分开</strong></li>\n<li><strong>注意内存泄露问题</strong><ul>\n<li>每一处结尾处注意释放内存</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"前端（view）\">前端（view）<a href=\"post/concurrent_skill#前端（view）\"></a></h3><ol>\n<li><strong>使用异步的方式请求数据</strong><ul>\n<li>ajax，让用户先看到一部分东西</li>\n</ul>\n</li>\n<li><strong>减少加载静态文件</strong><ul>\n<li>尽可能合并js，css文件</li>\n<li>图片压缩</li>\n<li>注：使静态文件占用尽量少的带宽</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"硬件方面\">硬件方面<a href=\"post/concurrent_skill#硬件方面\"></a></h3><ol>\n<li><strong>好的数据库</strong></li>\n<li><strong>加大带宽</strong></li>\n<li><strong>使用多机器，负载均衡</strong></li>\n</ol>\n","prev":{"title":"wget递归下载整个网站","slug":"wget"},"next":{"title":"netstat 命令详解","slug":"netstat_introduce"},"link":"https://vachelhu.github.io/blog/post/concurrent_skill/","toc":[{"title":"处理并发的一些技巧和思想","id":"处理并发的一些技巧和思想","index":"1"}],"copyright":{"author":"Wenjie Hu","link":"<a href=\"https://vachelhu.github.io/blog/post/concurrent_skill/\" title=\"处理并发的一些技巧和思想\">https://vachelhu.github.io/blog/post/concurrent_skill/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}