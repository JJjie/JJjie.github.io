// Generated by CoffeeScript 1.10.0
var blogdata, carry, catagolue, data, date, fs, getblogcata, gethtml, jade, markdown;

fs = require('fs');

markdown = require('markdown');

markdown = markdown.markdown;

jade = require('jade');

blogdata = require('./blogdata');

data = {
  'catagolue': '',
  'main': ''
};

date = new Date();

date = date.toLocaleDateString();

catagolue = fs.readdirSync('./draft');

gethtml = function(name) {
  var blogcontent, content, html, names, renderdata;
  if (name === '.DS_Store') {
    return;
  }
  content = fs.readFileSync("./draft/" + name, 'utf-8');
  blogcontent = markdown.toHTML(content);
  names = name.split('.');
  name = names[0];
  renderdata = {
    'blogcontent': blogcontent,
    'catagolue': blogdata,
    'title': name
  };
  html = jade.renderFile('./blog/model/singleblog.jade', renderdata);
  fs.writeFileSync("./blog/" + name + ".html", html, 'utf-8');
  return console.log(name + ' success!\n');
};

getblogcata = function(object) {
  var blogcata, dates, head, i, j, k, l, len, len1, o, time, timeline, v;
  timeline = [];
  blogcata = {};
  for (k in object) {
    v = object[k];
    for (j = 0, len = v.length; j < len; j++) {
      o = v[j];
      timeline.push(o);
    }
  }
  timeline.sort(function(a, b) {
    var at, bt;
    at = new Date(a.time);
    at = at.getTime();
    bt = new Date(b.time);
    bt = bt.getTime();
    return bt - at;
  });
  for (l = 0, len1 = timeline.length; l < len1; l++) {
    i = timeline[l];
    time = new Date(i.time);
    date = time.toLocaleDateString();
    dates = date.split('-');
    head = dates[0] + '年' + dates[1] + '月';
    if (blogcata[head] === void 0) {
      blogcata[head] = [i];
    } else {
      blogcata[head].push(i);
    }
  }
  return blogcata;
};

carry = function() {
  var blogstart, cata, j, k, len, renderdata, store, timedata, v;
  for (j = 0, len = catagolue.length; j < len; j++) {
    cata = catagolue[j];
    gethtml(cata);
  }
  for (k in blogdata) {
    v = blogdata[k];
    v.sort(function(a, b) {
      var at, bt;
      at = new Date(a.time);
      at = at.getTime();
      bt = new Date(b.time);
      bt = bt.getTime();
      return bt - at;
    });
  }
  timedata = getblogcata(blogdata);
  store = JSON.stringify(blogdata);
  fs.writeFileSync('./blogdata.json', store, 'utf-8');
  renderdata = {
    'timeline': timedata,
    'catagolue': blogdata
  };
  blogstart = jade.renderFile('./blog/model/start.jade', renderdata);
  fs.writeFileSync('./blog/blog.html', blogstart, 'utf-8');
  console.log('main success!\n');
  return console.log('done!\n');
};

module["export"] = {
  'carry': carry()
};
